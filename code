import tensorflow as tf
from tensorflow.keras.layers import Conv2D, Conv2DTranspose, Input, ReLU, BatchNormalization
from tensorflow.keras.models import Model

# Autoencoder model
def build_autoencoder(input_shape):
    # Encoder
    inputs = Input(shape=input_shape)

    # Encoding layers
    x = Conv2D(64, (3, 3), strides=2, padding='same')(inputs)
    x = BatchNormalization()(x)
    x = ReLU()(x)

    x = Conv2D(128, (3, 3), strides=2, padding='same')(x)
    x = BatchNormalization()(x)
    x = ReLU()(x)

    x = Conv2D(256, (3, 3), strides=2, padding='same')(x)
    x = BatchNormalization()(x)
    x = ReLU()(x)

    # Decoder
    x = Conv2DTranspose(256, (3, 3), strides=2, padding='same')(x)
    x = BatchNormalization()(x)
    x = ReLU()(x)

    x = Conv2DTranspose(128, (3, 3), strides=2, padding='same')(x)
    x = BatchNormalization()(x)
    x = ReLU()(x)

    x = Conv2DTranspose(64, (3, 3), strides=2, padding='same')(x)
    x = BatchNormalization()(x)
    x = ReLU()(x)

    # Output layer: Reconstruct high-resolution image
    outputs = Conv2DTranspose(3, (3, 3), activation='sigmoid', padding='same')(x)

    # Autoencoder model
    autoencoder = Model(inputs, outputs)
    return autoencoder

# Set input shape (e.g., low-resolution 32x32x3 image)
input_shape = (32, 32, 3)
autoencoder = build_autoencoder(input_shape)

# Compile the model
autoencoder.compile(optimizer='adam', loss='mse')

# Model summary
autoencoder.summary()

